let x = 5
let y = 6
println(1, ", ", 2, ", ", 3, ", and a string")
println("variables would be neat. Oh, there is one: ", x)

fn f(x) {
    println("Hello from function f!!! :D - x: ", x, ", y: ", y)
    return 8
}

let z = f(7)
println("result: ", z)
println("mining output, call: ", f(9), " <- result... and more output ^^")

fn outer() {
    let local = 123
    fn inner[local]() {
        println(local)
    }
    return inner
}

let inner = outer()
inner()

f = fn() {
    println("Yes")
}

f()

let huhu = 11
huhu = 12
println(huhu)

println(3*2)

fn fibonacci(n) {
    if (n > 1) {
        let result = fibonacci(n - 1) + fibonacci(n - 2)
        println(n, ": ", result)
        return result
    } else {
        return 1
    }
}

let result = fibonacci(5)

println("result: ", result)

let x = 0
while (x < 5) {
    print(x)
    x = x + 1
}
println("\n^ this should say 01234 :D")

fn ff() {
    return fn() {
        println("inner function printing")
    }
}

ff()()

let l = List(List)
let l2 = l[0](1, 2, 3)
println(l)
println(l2)

let s = struct {
    x: 1
    y: 2
}

println(s.x, ", ", s.y)

fn oop() {
    let self = struct {
        x: 1
        y: 2
        helper: fn(n) { return (x + y) * n }
    }
    return struct {
        f: fn [self] (n) {
            let result = self.helper(n) + self.x
            self.x = 2
            return result
        }
    }
}

let o = oop()
println(o.f(5), ", ", o.f(5), ", ", o.f(5))

let somevar = 5
println(somevar)
somevar = 7
println(somevar)

s.z = 3
println(s.z)
s.x = 55
println(s)

let sl = List(struct {
    x: 1
})

println(sl[0].x)
sl[0].x = 2
println(sl[0].x)

let set = HashSet(1, 2, 5)
println(set.contains(1))
println(set.contains(2))
println(set.contains(3))
