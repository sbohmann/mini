let data = HashMap()
let index = 0

fn run() {
    while (true) {
        if (step()) {
            # println("step returned true")
            return None
        }
        # println("step returned false: ")
    }
}

fn step() {
    let opcode = read_opcode()
    if (opcode == 1) {
        # println("add...")
        add()
        return false
    }
    if (opcode == 2) {
        # println("mul...")
        multiply()
        return false
    }
    if (opcode == 99) {
        # println("99!!!")
        return true
    }
    fail("Unknown opcode: ", opcode)
}

fn read_opcode() {
    # println("reading opcode at index ", index)
    let result = data.get(index)
    # println("result: ", result, result == 0, result == None)
    if (result == None) {
        fail("Index out of range: ", index)
    }
    return result
}

fn add() {
    binary_operation(fn (lhs, rhs) { return lhs + rhs })
}

fn multiply() {
    binary_operation(fn (lhs, rhs) { return lhs * rhs })
}

fn binary_operation(raw_operation) {
    let lhs_source = data.get(index + 1)
    let rhs_source = data.get(index + 2)
    let result = raw_operation(data.get(lhs_source), data.get(rhs_source))
    let target = data.get(index + 3)
    data.put(target, result)
    index = index + 4
}

fn read_data() {
    let raw_data = read_raw_data()
    build_data(raw_data)
}

fn read_raw_data() {
    return read_text_file('input.txt')
        .split(',')
        .map(fn (line) { return parse_integer(line.trim()) })
}

fn build_data(raw_data) {
    data = HashMap()
    let data_index = 0
    while (data_index < raw_data.size) {
        data.put(data_index, raw_data[data_index])
        data_index = data_index + 1
    }
    index = 0
}

fn a() {
    read_data()

    data.put(1, 12)
    data.put(2, 2)

    run()

    println("a: ", data.get(0))
}

fn b() {
    let raw_data = read_raw_data()
    let noun = 0
    while (noun <= 99) {
        let verb = 0
        while (verb <= 99) {
            build_data(raw_data)
            # println("built data.")
            data.put(1, noun)
            data.put(2, verb)
            # println("filled data.")
            run()
            if (data.get(0) == 19690720) {
                println('noun: ', noun, ', verb: ', verb)
                println('b: ', (100 * noun + verb))
                exit(0)
            }
            verb = verb + 1
        }
        noun = noun + 1
    }
}

fn simple() {
    let simple = List(
        List(1, 0, 0, 0, 99),
        List(2, 3, 0, 3, 99),
        List(2, 4, 4, 5, 99, 0),
        List(1, 1, 1, 4, 99, 5, 6, 0, 99))

    simple.foreach(fn (input) {
        build_data(input)
        run()
        data.foreach(fn (key, value) {
            println(key, ': ', value)
        })
        println('\n')
    })
}

b()
